{"version":3,"sources":["logo.tsx","side_menu.tsx","project.tsx","projects.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Logo","name","height","width","src","alt","base","css","SideMenu","children","childLinks","React","Children","map","child","Project","url","className","href","target","rel","animateGridIn","gridContainer","anime","timeline","add","targets","querySelectorAll","translateY","delay","stagger","opacity","animatingIn","value","easing","duration","ProjectsGrid","items","visible","transitionKey","useRef","useState","prevVisible","setPrevVisible","current","Transition","unmountOnExit","appear","onEnter","in","key","timeout","TransitionGroup","component","item","index","App","to","exact","path","render","Array","from","keys","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56d594b5.chunk.js","sourcesContent":["import React from \"react\";\n\ntype ImgProps = {\n  name: string;\n  height?: number;\n  width?: number;\n};\n\nconst Logo: React.FC<ImgProps> = ({ name, height, width }: ImgProps) => {\n  return (\n    <img\n      src={name}\n      height={height ? height : \"auto\"}\n      width={width ? width : \"auto\"}\n      alt={name}\n    />\n  );\n};\n\nexport default Logo;\n","import React, { ReactNode } from \"react\";\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\nconst base = css`\n  list-style: none;\n`;\n\nconst SideMenu: React.FC = ({ children }: { children?: ReactNode }) => {\n  if (!children) return <></>;\n\n  const childLinks = React.Children.map(children, child => {\n    return (\n      <li\n        css={css`\n          padding: 5px 10px;\n        `}\n      >\n        {child}\n      </li>\n    );\n  });\n\n  return (\n    <ul\n      css={css`\n        ${base};\n        background-color: inherit;\n      `}\n    >\n      {childLinks}\n    </ul>\n  );\n};\n\nexport default SideMenu;\n","/** @jsx jsx */ import { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\n\ntype ProjectProps = {\n  name: string;\n  url: string;\n};\n\nconst Project: React.FC<ProjectProps> = ({ name, url }: ProjectProps) => {\n  return (\n    <div\n      css={css`\n        border: 1px solid lightblue;\n        width: 16%;\n        margin: 5px;\n        text-align: center;\n        padding: 10px 15px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n        border-radius: 5px; /* 5px rounded corners */\n      `}\n      className=\"card\"\n    >\n      <label>{name}</label>\n      <br />\n      <a href={`${url}`} target=\"_blank\" rel=\"noopener noreferrer\">\n        Github\n      </a>\n    </div>\n  );\n};\n\nexport default Project;\n","// eslint-disable-next-line no-unused-vars\nimport { useRef, useState } from \"react\";\nimport Project from \"./project\";\nimport { css } from \"@emotion/core\";\n\nimport anime from \"animejs\";\nimport Transition from \"react-transition-group/Transition\";\nimport TransitionGroup from \"react-transition-group/TransitionGroup\";\nimport React, { ReactElement } from \"react\";\n\n\nconst createOpacityAnimationConfig = (animatingIn: any) :any => ({\n  value: animatingIn ? [0, 1] : 0,\n  easing: \"linear\",\n  duration: 2500\n});\n\n\nconst animateGridIn = (gridContainer: HTMLElement) :any =>\n  anime.timeline().add({\n    targets: gridContainer.querySelectorAll(\".card\"),\n    translateY: [1000, 0],\n    delay: anime.stagger(100),\n    opacity: createOpacityAnimationConfig(true)\n  });\n\n\nconst ProjectsGrid = ({ items, visible }: {items:any, visible:boolean}) : ReactElement => {\n  const transitionKey = useRef(1);\n  const [prevVisible, setPrevVisible] = useState(visible);\n  if (visible !== prevVisible) setPrevVisible(visible);\n  if (visible && !prevVisible) {\n    transitionKey.current += 1;\n  }\n\n  return (\n    <Transition\n      unmountOnExit\n      appear\n      onEnter={animateGridIn}\n      in={visible}\n      key={transitionKey.current}\n      timeout={3}\n    >\n      <div\n        className=\"grid animated-grid\"\n        css={css`\n          display: flex;\n          justify-content: flex-start;\n          flex-wrap: wrap;\n        `}\n      >\n        <TransitionGroup component={null}>\n          {items.map((item: any, index: number) => (\n            <Transition key={item} timeout={3}>\n              <Project\n                key={index}\n                name=\"'holy grail' React template with emotion\"\n                url=\"https://www.github.com/mvkdev\"\n              />\n            </Transition>\n          ))}\n        </TransitionGroup>\n      </div>\n    </Transition>\n  );\n};\n\nexport default ProjectsGrid;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router\";\nimport { Link, BrowserRouter } from \"react-router-dom\";\nimport Logo from \"./logo\";\nimport SideMenu from \"./side_menu\";\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport ProjectsGrid from \"./projects\";\n\n// const bounce = keyframes`\n//   from, 20%, 53%, 80%, to {\n//     transform: translate3d(0,0,0);\n//   }\n\n//   40%, 43% {\n//     transform: translate3d(0, -30px, 0);\n//   }\n\n//   70% {\n//     transform: translate3d(0, -15px, 0);\n//   }\n\n//   90% {\n//     transform: translate3d(0,-4px,0);\n//   }\n// `;\n\n// const spinaround = keyframes`\n//   from {\n//       -webkit-transform: rotateY(0deg);\n//       opacity:0;\n//   }\n//   to {\n//       -webkit-transform: rotateY(359deg);\n//       opacity:1;\n//   }\n// `;\n\nconst App: React.FC = () => {\n  return (\n    <div css={css``}>\n      <BrowserRouter>\n        <div\n          css={css`\n            display: flex;\n            min-height: 100vh;\n            flex-direction: column;\n          `}\n        >\n          <header\n            css={css`\n              height: 76px;\n              background: orange;\n            `}\n          >\n            <div></div>\n          </header>\n          <div className=\"App\">\n            <nav\n              css={css`\n                background: gainsboro;\n                flex: 1;\n              `}\n            >\n              <Logo name=\"logo_transparent.png\" height={250} />\n\n              <SideMenu>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/projects\">Projects</Link>\n                <Link to=\"/about\">About</Link>\n              </SideMenu>\n            </nav>\n            <main\n              css={css`\n                flex: 5;\n              `}\n            >\n              <Switch>\n                <Route\n                  exact\n                  path=\"/\"\n                  component={() => <article>home</article>}\n                />\n                <Route\n                  path=\"/about\"\n                  component={() => <div css={css``}></div>}\n                />\n                <Route\n                  path=\"/projects\"\n                  render={() => (\n                    <ProjectsGrid\n                      items={Array.from(Array(25).keys())}\n                      visible\n                    />\n                  )}\n                />\n\n                <Route\n                  component={() => {\n                    return (\n                      <p>I can`&apos;`t find what you`&apos;`re looking for.</p>\n                    );\n                  }}\n                />\n              </Switch>\n            </main>\n          </div>\n          <footer\n            css={css`\n              height: 76px;\n              background: violet;\n            `}\n          >\n            <p>\n              No copyright; do whatever you`&apos;`d like with the content of\n              this site.\n            </p>\n          </footer>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}